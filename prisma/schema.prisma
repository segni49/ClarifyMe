// Prisma schema for ClarifyMe SaaS
// Includes User, JournalEntry, Subscription, Recommendation, Quiz

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
 directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String?  @unique
  image        String?
  emailVerified DateTime?
  role         Role     @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  journalEntries JournalEntry[]
  subscription Subscription?
  accounts     Account[]
  sessions     Session[]
}

enum Role {
  STUDENT
  PRO
  ADMIN
}

model JournalEntry {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  topic     String
  confusion String
  summary   String
  quiz      Json
  createdAt DateTime @default(now())
}

model Subscription {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  status    String
  startedAt DateTime @default(now())
  endedAt   DateTime?
  invoiceId String?
}

model Recommendation {
  id        String   @id @default(cuid())
  topic     String
  title     String
  url       String
  type      String // book, course
  affiliate String?
  createdAt DateTime @default(now())
}

// NextAuth required models

// NextAuth.js required models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
